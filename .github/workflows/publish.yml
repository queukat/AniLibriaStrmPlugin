name: 🚀 Publish plugin to GitHub Pages

permissions:
  contents: write

on:
  # запуск при создании релиза-tag («Publish release» в UI
  release:
    types: [ released ]

  # возможность вручную из вкладки Actions
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (leave empty to use latest tag)"
        required: false

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      # версия берётся из релиза либо из ручного ввода
      VERSION: ${{ github.event.inputs.version || github.event.release.tag_name }}

      # базовый URL вашего каталога (без manifest.json в конце!)
      BASE_URL: "https://queukat.github.io/AniLibriaStrmPlugin/plugins/"

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Build plugin (JPRM)
        uses: oddstr13/jellyfin-plugin-repository-manager@v1.1.1
        id: jprm
        with:
          dotnet-target: net8.0
          version: ${{ env.VERSION }}
  
      # ─── ставим jprm из master ───────────────────────────────────────────
      - name: Install jprm CLI
        run: |
          python -m pip install --quiet \
            "git+https://github.com/oddstr13/jellyfin-plugin-repository-manager@v1.1.1"
      
      
      # ─── готовим publish-dir и обновляем manifest ────────────────────────
      - name: Prepare publish directory + update manifest
        run: |
          set -e
          mkdir -p publish/plugins
          cp "${{ steps.jprm.outputs.artifact }}" publish/plugins/

          pushd publish/plugins

          MANIFEST=./manifest.json
          BASE_URL="https://queukat.github.io/AniLibriaStrmPlugin/plugins/"

          # если файла ещё нет — создаём «[]»
          [ -f "${MANIFEST}" ] || echo "[]" > "${MANIFEST}"

          # ▸ добавляем (или обновляем) запись о ZIP
          jprm repo add "${MANIFEST}" ./*.zip

          # ▸ дописываем полный sourceUrl, если он относительный
          #    (jq добавляет BASE_URL только тем версиям, где его ещё нет)
          jq --arg base "${BASE_URL}" \
             'map(.versions |= map(
                  .sourceUrl |= (startswith("http") as $h | if $h then . else ($base + .) end)
                ))' \
             "${MANIFEST}" > manifest.tmp && mv manifest.tmp "${MANIFEST}"

          popd
          
          jq --arg icon "${ICON_URL}" \
          'map(if has("imageUrl") then . else . + {imageUrl:$icon} end)' \
          publish/plugins/manifest.json > manifest.tmp && \
          mv manifest.tmp publish/plugins/manifest.json
          
      - name: Copy plugin icon to pages
        run: |
          mkdir -p publish/plugins/images
          cp Resources/icon.png publish/plugins/images/anilibria-strm.png
      
      
      # ─────────────────────────────────────────────────────────
      # Деплой в ветку gh-pages  ➜  GitHub Pages
      # ─────────────────────────────────────────────────────────
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./publish
          publish_branch: gh-pages
          commit_message: "chore(publish): release ${{ env.VERSION }}"
